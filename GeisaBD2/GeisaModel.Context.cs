//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeisaBD2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GEISAEntities : DbContext
    {
        public GEISAEntities()
            : base("name=GEISAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bancos> Bancos { get; set; }
        public virtual DbSet<CajaChica> CajaChica { get; set; }
        public virtual DbSet<CajaChicaDetalle> CajaChicaDetalle { get; set; }
        public virtual DbSet<Ciudad> Ciudad { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Conceptos> Conceptos { get; set; }
        public virtual DbSet<Contrarecibo> Contrarecibo { get; set; }
        public virtual DbSet<Domicilios> Domicilios { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<Empresa> Empresa { get; set; }
        public virtual DbSet<EmpresaBancos> EmpresaBancos { get; set; }
        public virtual DbSet<Estado> Estado { get; set; }
        public virtual DbSet<Factura> Factura { get; set; }
        public virtual DbSet<Formulario> Formulario { get; set; }
        public virtual DbSet<FormularioPermisos> FormularioPermisos { get; set; }
        public virtual DbSet<GastosAdministrativos> GastosAdministrativos { get; set; }
        public virtual DbSet<Modulo> Modulo { get; set; }
        public virtual DbSet<Obra> Obra { get; set; }
        public virtual DbSet<Pagos> Pagos { get; set; }
        public virtual DbSet<PagosFactura> PagosFactura { get; set; }
        public virtual DbSet<Perfil> Perfil { get; set; }
        public virtual DbSet<PerfilPermisos> PerfilPermisos { get; set; }
        public virtual DbSet<Permisos> Permisos { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<ProveedorBancos> ProveedorBancos { get; set; }
        public virtual DbSet<ReposicionGastos> ReposicionGastos { get; set; }
        public virtual DbSet<TipoPago> TipoPago { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Vehiculo> Vehiculo { get; set; }
        public virtual DbSet<VehiculoCajaChica> VehiculoCajaChica { get; set; }
        public virtual DbSet<VehiculoCajaChicaDetalle> VehiculoCajaChicaDetalle { get; set; }
    
        public virtual ObjectResult<getEstadoCuentaProveedores_Result> getEstadoCuentaProveedores(Nullable<System.DateTime> fechaIni, Nullable<System.DateTime> fechaFin, Nullable<int> proveedor, Nullable<int> obra, Nullable<bool> conSaldo)
        {
            var fechaIniParameter = fechaIni.HasValue ?
                new ObjectParameter("FechaIni", fechaIni) :
                new ObjectParameter("FechaIni", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            var proveedorParameter = proveedor.HasValue ?
                new ObjectParameter("Proveedor", proveedor) :
                new ObjectParameter("Proveedor", typeof(int));
    
            var obraParameter = obra.HasValue ?
                new ObjectParameter("Obra", obra) :
                new ObjectParameter("Obra", typeof(int));
    
            var conSaldoParameter = conSaldo.HasValue ?
                new ObjectParameter("ConSaldo", conSaldo) :
                new ObjectParameter("ConSaldo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEstadoCuentaProveedores_Result>("getEstadoCuentaProveedores", fechaIniParameter, fechaFinParameter, proveedorParameter, obraParameter, conSaldoParameter);
        }
    }
}
